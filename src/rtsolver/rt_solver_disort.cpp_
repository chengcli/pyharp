//! \file rt_solver_disort.cpp
//! \brief Call DISORT to perform radiative transfer calculation

// C/C++
#include <cmath>
#include <iostream>

// external
#include <yaml-cpp/yaml.h>

// athena
#include <athena/coordinates/coordinates.hpp>
#include <athena/mesh/mesh.hpp>

// application
#include <application/application.hpp>
#include <application/exceptions.hpp>

// climath
#include <climath/interpolation.h>

// canoe
#include <constants.hpp>
#include <impl.hpp>

// astro
#include <astro/celestrial_body.hpp>

// exo3
#include <exo3/cubed_sphere.hpp>
#include <exo3/cubed_sphere_utility.hpp>

// harp
#include "radiation.hpp"
#include "rt_solvers.hpp"

void Disort::Prepare(MeshBlock const *pmb, int k, int j) {
  auto &wmin = pmy_band_->wrange_.first;
  auto &wmax = pmy_band_->wrange_.second;

  Real dist_au = 1.;
  Direction ray = pmb->pimpl->prad->GetRayInput(0);
  auto planet = pmb->pimpl->planet;

  if (planet && pmy_band_->TestFlag(RadiationFlags::TimeDependent)) {
    Real time = pmb->pmy_mesh->time;
    Real lat, lon;

    CubedSphereUtility::get_latlon_on_sphere(&lat, &lon, pmb, k, j, pmb->is);

    ray = planet->ParentZenithAngle(time, lat, lon);
    dist_au = planet->ParentDistanceInAu(time);
  } else {  // constant zenith angle
    if (pmy_band_->HasPar("umu0")) {
      ray.mu = pmy_band_->GetPar<Real>("umu0");
    }

    if (pmy_band_->HasPar("phi0")) {
      ray.phi = pmy_band_->GetPar<Real>("phi0");
    }

    if (pmy_band_->HasPar("dist_au")) {
      dist_au = pmy_band_->GetPar<Real>("dist_au");
    }
  }

  if (ds_.flag.ibcnd != 0) {
    throw ValueError("RTSolverDisort::CalRadtranFlux", "ibcnd", ds_.flag.ibcnd,
                     0);
  }

  // pack temperature
  if (ds_.flag.planck) {
    pmy_band_->packTemperature();
  }

  // pack spectral properties
  pmy_band_->packSpectralProperties();

  ds_.bc.umu0 = ray.mu > 1.E-3 ? ray.mu : 1.E-3;
  ds_.bc.phi0 = ray.phi;

  if (pmy_band_->TestFlag(RadiationFlags::BroadBand)) {
    // stellar source function overrides fbeam
    if (pmy_band_->HasPar("S0")) {
      ds_.bc.fbeam = pmy_band_->GetPar<Real>("S0");
    } else if (pmy_band_->HasPar("temp0")) {
      Real temp0 = pmy_band_->GetPar<Real>("temp0");
      ds_.bc.fbeam = Constants::stefanBoltzmann * pow(temp0, 4);
    } else if (planet && planet->HasParentFlux()) {
      ds_.bc.fbeam = planet->ParentInsolationFlux(wmin, wmax, 1.);
    } else {
      ds_.bc.fbeam = 0.;
    }
    ds_.bc.fbeam /= dist_au * dist_au;
  }

  pmb->pcoord->Face1Area(k, j, pmb->is, pmb->ie + 1, farea_);
  pmb->pcoord->CellVolume(k, j, pmb->is, pmb->ie, vol_);

  // set the surface temperature from the user input variables
  // FIXME(cli)
  // AthenaArray<Real> &ts = pmb->ruser_meshblock_data[1];
  // ds_.bc.btemp = ts(j);
}

torch::Tensor Disort::forward(torch::Tensor ftoa, torch::Tensor temf,
                              torch::Tensor prop, float ray[2],
                              torch::Tensor out) {
  Real dist_au = 1.;
  auto planet = pmb->pimpl->planet;

  if (planet && pmy_band_->TestFlag(RadiationFlags::TimeDependent)) {
    dist_au = planet->ParentDistanceInAu(pmb->pmy_mesh->time);
  } else if (pmy_band_->HasPar("dist_au")) {
    dist_au = pmy_band_->GetPar<Real>("dist_au");
  }

  // loop over spectral grids in the band
  bool override_with_stellar_spectra = false;
  if (!pmy_band_->TestFlag(RadiationFlags::BroadBand) &&
      !pmy_band_->HasPar("S0") && !pmy_band_->HasPar("temp0") && planet &&
      planet->HasParentFlux()) {
    override_with_stellar_spectra = true;
  }

  pmy_band_->pexv->GatherAll(pmb);
  if (ds_.flag.planck) {
    pmy_band_->unpackTemperature(&ds_);
  }

  int b = 0;
  for (auto &spec : pmy_band_->pgrid_->spec) {
    if (override_with_stellar_spectra) {
      // stellar source function
      ds_.bc.fbeam =
          planet->ParentInsolationFlux(spec.wav1, spec.wav2, dist_au);
      // planck source function
      ds_.wvnmlo = spec.wav1;
      ds_.wvnmhi = spec.wav2;
    }

    // transfer spectral grid data
    pmy_band_->unpackSpectralProperties(b, &ds_);

    // run disort
    int err = c_disort(&ds_, &ds_out_);

    if (err != 0) {
      throw std::runtime_error("DisortWrapper::Run failed.");
    }

    // add spectral bin flux
    addDisortFlux(pmb->pcoord, b++, k, j, pmb->is, pmb->ie + 1);
  }
}

void RadiationBand::RTSolverDisort::addDisortFlux(Coordinates const *pcoord,
                                                  int b, int k, int j, int il,
                                                  int iu) {
  auto &bflxup = pmy_band_->bflxup;
  auto &bflxdn = pmy_band_->bflxdn;

  auto &flxup = pmy_band_->flxup_;
  auto &flxdn = pmy_band_->flxdn_;
  auto const &spec = pmy_band_->pgrid_->spec;

  int rank_in_column = pmy_band_->pexv->GetRankInGroup();

  /// accumulate flux from spectral bins
  for (int i = il; i <= iu; ++i) {
    int m = ds_.nlyr - (rank_in_column * (iu - il) + i - il);
    //! \bug does not work for spherical geometry, need to scale area using
    //! farea(il)/farea(i)
    // flux up
    flxup(b, k, j, i) = ds_out_.rad[m].flup;

    //! \bug does not work for spherical geomtry, need to scale area using
    //! farea(il)/farea(i)
    // flux down
    flxdn(b, k, j, i) = ds_out_.rad[m].rfldir + ds_out_.rad[m].rfldn;

    bflxup(k, j, i) += spec[b].wght * flxup(b, k, j, i);
    bflxdn(k, j, i) += spec[b].wght * flxdn(b, k, j, i);
  }

  //! \note Spherical correction by XIZ
  //! xiz 2022 flux scaling so that the heating rate is the same as the
  //! plane-parallel scheme volheating scaling: first calculate flux divergence
  //! from DISORT using Plane-parallel in a cell then mulitpled by the cell
  //! volume divided by dx1f then solve for F using F1*S1-F2*S2 = volheating
  //! the top fluxes are the still the same as the plane-paralell values
  Real volh;
  Real bflxup_iu = bflxup(k, j, iu);
  Real bflxdn_iu = bflxdn(k, j, iu);

  for (int i = iu - 1; i >= il; --i) {
    // upward
    volh = (bflxup_iu - bflxup(k, j, i)) / pcoord->dx1f(i) * vol_(i);
    bflxup_iu = bflxup(k, j, i);
    bflxup(k, j, i) = (bflxup(k, j, i + 1) * farea_(i + 1) - volh) / farea_(i);

    // downward
    volh = (bflxdn_iu - bflxdn(k, j, i)) / pcoord->dx1f(i) * vol_(i);
    bflxdn_iu = bflxdn(k, j, i);
    bflxdn(k, j, i) = (bflxdn(k, j, i + 1) * farea_(i + 1) - volh) / farea_(i);
  }
}

void RadiationBand::RTSolverDisort::CalBandRadiance(MeshBlock const *pmb, int k,
                                                    int j) {
  if (ds_.flag.onlyfl) {
    throw RuntimeError("RTSolverDisort::CalBandRadiance",
                       "Radiance calculation disabled");
  }

  if (ds_.ntau != 1) {
    throw RuntimeError("RTSolverDisort::CalBandRadiance",
                       "Only toa radiance (ds.ntau = 1) is supported");
  }

  int nrays = ds_.nphi * ds_.numu;

  if (nrays < pmy_band_->GetNumOutgoingRays()) {
    throw RuntimeError("RTSolverDisort::CalBandRadiance",
                       "Number of outgoing rays more than DISORT can host");
  }

  // toa has been reset in RadiationBand::CalBandRadiance

  Real dist_au = 1.;
  auto planet = pmb->pimpl->planet;

  if (planet && pmy_band_->TestFlag(RadiationFlags::TimeDependent)) {
    dist_au = pmb->pimpl->planet->ParentDistanceInAu(pmb->pmy_mesh->time);
  } else if (pmy_band_->HasPar("dist_au")) {
    dist_au = pmy_band_->GetPar<Real>("dist_au");
  }

  pmy_band_->pexv->GatherAll(pmb);
  if (ds_.flag.planck) {
    pmy_band_->unpackTemperature(&ds_);
  }

  // loop over spectral grids in the band
  int b = 0;
  for (auto &spec : pmy_band_->pgrid_->spec) {
    // override source function for non-broadband radiation
    if (!(pmy_band_->TestFlag(RadiationFlags::BroadBand))) {
      // stellar source function
      if (planet) {
        ds_.bc.fbeam =
            planet->ParentInsolationFlux(spec.wav1, spec.wav2, dist_au);
      } else {
        ds_.bc.fbeam = 0.0;
      }
      // planck source function
      ds_.wvnmlo = spec.wav1;
      ds_.wvnmhi = spec.wav2;
    }

    // transfer spectral grid data
    pmy_band_->unpackSpectralProperties(b, &ds_);

    // run disort
    c_disort(&ds_, &ds_out_);

    // add spectral bin radiance
    addDisortRadiance(b++, k, j);
  }
}

void RadiationBand::RTSolverDisort::addDisortRadiance(int b, int k, int j) {
  auto &toa = pmy_band_->toa_;
  auto &btoa = pmy_band_->btoa;
  auto &spec = pmy_band_->pgrid_->spec;
  auto &rayout = pmy_band_->rayOutput_;

  for (int n = 0; n < pmy_band_->GetNumOutgoingRays(); ++n) {
    Real val;
    Real coor[2] = {rayout[n].mu, rayout[n].phi};
    interpn(&val, coor, ds_out_.uu, dir_axis_.data(), dir_dim_, 2, 1);
    toa(b, n, k, j) = val;
    btoa(n, k, j) += spec[b].wght * toa(b, n, k, j);
  }
}

#endif  // RT_DISORT
